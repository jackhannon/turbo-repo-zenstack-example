/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { type QueryContext, type CrudContract, type PermissionCheckerContext } from "@zenstackhq/runtime";
import { allFieldsEqual } from "@zenstackhq/runtime/validation";
import { type PolicyDef, type PermissionCheckerConstraint } from "@zenstackhq/runtime/enhancements/node";

const policy: PolicyDef = {
    policy: {
        team: {
            modelLevel: {
                read: { guard: Team_read, },
                create: { guard: Team_create, inputChecker: Team_create_input, },
                update: { guard: Team_update, },
                postUpdate: { guard: Team_postUpdate, },
                delete: { guard: Team_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
    },
    validation: {
        team: { hasValidation: false },
    },

};

function Team_read(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return { AND: [] }; } return { OR: [] };
}

function $check_Team_read(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return true; }

    return false;
}

function Team_create(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return { AND: [] }; } return { OR: [] };
}

function $check_Team_create(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return true; }

    return false;
}

function Team_create_input(input: any, context: QueryContext): boolean {
    const user: any = context.user ?? null;
    return (user != null)
}

function Team_update(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return { AND: [] }; } return { OR: [] };
}

function $check_Team_update(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return true; }

    return false;
}

function Team_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Team_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Team_delete(context: QueryContext, db: CrudContract): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return { AND: [] }; } return { OR: [] };
}

function $check_Team_delete(input: any, context: QueryContext): any {
    const user: any = context.user ?? null;
    if ((user != null)) { return true; }

    return false;
}
export default policy
